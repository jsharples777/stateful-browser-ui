import { DetailViewRenderer } from "../interface/DetailViewRenderer";
import { ViewFieldPermissionChecker } from "../ViewFieldPermissionChecker";
import { ViewListener } from "../interface/ViewListener";
import { DetailViewRuntimeConfig, ItemEvent, ViewDOMConfig } from "../../ConfigurationTypes";
import { ItemViewListener } from "../item/ItemViewListener";
import { Form } from "../../form/Form";
import { DataObjectDefinition } from "browser-state-management";
import { ItemViewConfigHelper } from "../item/ItemViewConfigHelper";
import { DetailView } from "../interface/DetailView";
import { DetailViewListenerForwarder } from "../delegate/DetailViewListenerForwarder";
export declare class FormDetailViewRenderer implements DetailViewRenderer, ItemViewListener {
    protected objDef: DataObjectDefinition;
    protected form: Form | null;
    protected currentItem: any;
    protected isNewItem: boolean;
    protected containerId: string;
    protected forwarder: DetailViewListenerForwarder | null;
    protected view: DetailView | null;
    protected permissionChecker: ViewFieldPermissionChecker;
    protected configHelper: ItemViewConfigHelper;
    protected hasExternalControl: boolean;
    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker: ViewFieldPermissionChecker, configHelper: ItemViewConfigHelper, hasExternalControl?: boolean);
    isShowing(): boolean;
    hasActionPermission(actionName: string, from: string, item: any): boolean;
    setEventForwarder(forwarder: DetailViewListenerForwarder): void;
    setView(view: DetailView): void;
    onDocumentLoaded(): void;
    reset(): void;
    initialise(runtimeConfig: DetailViewRuntimeConfig): void;
    displayItemReadonly(dataObject: any): void;
    getName(): string;
    setContainedBy(container: HTMLElement): void;
    addEventListener(listener: ViewListener): void;
    hasChanged(): boolean;
    getUIConfig(): ViewDOMConfig;
    getDataSourceKeyId(): string;
    clearDisplay(): void;
    clearReadOnly(): void;
    setReadOnly(): void;
    isReadOnly(): boolean;
    createItem(dataObj: any | null): any;
    displayItem(dataObj: any): void;
    hide(): void;
    show(): void;
    render(): void;
    hasPermissionToDeleteItem(item: any): boolean;
    hasPermissionToUpdateItem(item: any): boolean;
    getForm(): Form | null;
    handleActionItem(actionName: string, selectedItem: any): void;
    isDisplayingItem(dataObj: any): boolean;
    itemViewEvent(name: string, event: ItemEvent, formValues?: any): boolean;
    getItemDescription(from: string, item: any): string;
    getItemId(from: string, item: any): string;
    itemViewHasChanged(name: string): void;
    fieldAction(name: string, event: ItemEvent): void;
}
